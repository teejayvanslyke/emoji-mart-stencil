/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';


import {
  EmojiProps,
} from './components/emoji/emojiProps';


export namespace Components {

  interface EmartAnchors {
    'categories': any[];
    'color': any;
    'i18n': any;
    'onAnchorClick': any;
  }
  interface EmartAnchorsAttributes extends StencilHTMLAttributes {
    'categories'?: any[];
    'color'?: any;
    'i18n'?: any;
    'onAnchorClick'?: any;
  }

  interface EmartCategory {
    'categoryId': any;
    'categoryKey': any;
    'categoryLoaded': any;
    'custom': any;
    'emojiProps': any;
    'emojis': any;
    'forceUpdate': () => void;
    'getTop': () => number;
    'handleScroll': (scrollTop: any) => boolean;
    'hasStickyPosition': boolean;
    'i18n': any;
    'memoizeSize': () => void;
    'name': string;
    'native': boolean;
    'perLine': number;
    'recent': string[];
    'updateDisplay': (display: any) => void;
  }
  interface EmartCategoryAttributes extends StencilHTMLAttributes {
    'categoryId'?: any;
    'categoryKey'?: any;
    'categoryLoaded'?: any;
    'custom'?: any;
    'emojiProps'?: any;
    'emojis'?: any;
    'hasStickyPosition'?: boolean;
    'i18n'?: any;
    'name'?: string;
    'native'?: boolean;
    'perLine'?: number;
    'recent'?: string[];
  }

  interface EmartEmoji {
    'backgroundImageFn': any;
    'emoji': any;
    'fallback': any;
    'forceSize': any;
    'html': any;
    'native': any;
    'onClick': any;
    'onLeave': any;
    'onLoaded': any;
    'onOver': any;
    'set': any;
    'sheetSize': any;
    'size': number;
    'skin': any;
    'tooltip': any;
  }
  interface EmartEmojiAttributes extends StencilHTMLAttributes {
    'backgroundImageFn'?: any;
    'emoji'?: any;
    'fallback'?: any;
    'forceSize'?: any;
    'html'?: any;
    'native'?: any;
    'onClick'?: any;
    'onLeave'?: any;
    'onLoaded'?: any;
    'onOver'?: any;
    'set'?: any;
    'sheetSize'?: any;
    'size'?: number;
    'skin'?: any;
    'tooltip'?: any;
  }

  interface EmartPicker {
    'autoFocus': boolean;
    'backgroundImageFn': any;
    'clearSearch': () => void;
    'color': string;
    'custom': any;
    'emoji': string;
    'emojiSize': number;
    'emojiTooltip': any;
    'emojisToShowFilter': any;
    'exclude': any;
    'i18n': any;
    'include': any;
    'native': any;
    'onEmojiClicked': any;
    'perLine': number;
    'pickerStyle': any;
    'recent': any;
    'resetScroll': () => void;
    'set': string;
    'sheetSize': any;
    'showAnchors': boolean;
    'showPreview': boolean;
    'skin': any;
    'title': string;
    'width': string;
  }
  interface EmartPickerAttributes extends StencilHTMLAttributes {
    'autoFocus'?: boolean;
    'backgroundImageFn'?: any;
    'color'?: string;
    'custom'?: any;
    'emoji'?: string;
    'emojiSize'?: number;
    'emojiTooltip'?: any;
    'emojisToShowFilter'?: any;
    'exclude'?: any;
    'i18n'?: any;
    'include'?: any;
    'native'?: any;
    'onEmojiClicked'?: any;
    'perLine'?: number;
    'pickerStyle'?: any;
    'recent'?: any;
    'set'?: string;
    'sheetSize'?: any;
    'showAnchors'?: boolean;
    'showPreview'?: boolean;
    'skin'?: any;
    'title'?: string;
    'width'?: string;
  }

  interface EmartPreview {
    'emoji': any;
    'emojiProps': EmojiProps;
    'idleEmoji': string;
    'skinsProps': object;
    'title': string;
  }
  interface EmartPreviewAttributes extends StencilHTMLAttributes {
    'emoji'?: any;
    'emojiProps'?: EmojiProps;
    'idleEmoji'?: string;
    'skinsProps'?: object;
    'title'?: string;
  }

  interface EmartSearch {
    'autoFocus': boolean;
    'clear': () => void;
    'custom': any;
    'emojisToShowFilter': any;
    'exclude': any;
    'i18n': any;
    'include': any;
    'maxResults': number;
    'onSearch': any;
  }
  interface EmartSearchAttributes extends StencilHTMLAttributes {
    'autoFocus'?: boolean;
    'custom'?: any;
    'emojisToShowFilter'?: any;
    'exclude'?: any;
    'i18n'?: any;
    'include'?: any;
    'maxResults'?: number;
    'onSearch'?: any;
  }
}

declare global {
  interface StencilElementInterfaces {
    'EmartAnchors': Components.EmartAnchors;
    'EmartCategory': Components.EmartCategory;
    'EmartEmoji': Components.EmartEmoji;
    'EmartPicker': Components.EmartPicker;
    'EmartPreview': Components.EmartPreview;
    'EmartSearch': Components.EmartSearch;
  }

  interface StencilIntrinsicElements {
    'emart-anchors': Components.EmartAnchorsAttributes;
    'emart-category': Components.EmartCategoryAttributes;
    'emart-emoji': Components.EmartEmojiAttributes;
    'emart-picker': Components.EmartPickerAttributes;
    'emart-preview': Components.EmartPreviewAttributes;
    'emart-search': Components.EmartSearchAttributes;
  }


  interface HTMLEmartAnchorsElement extends Components.EmartAnchors, HTMLStencilElement {}
  var HTMLEmartAnchorsElement: {
    prototype: HTMLEmartAnchorsElement;
    new (): HTMLEmartAnchorsElement;
  };

  interface HTMLEmartCategoryElement extends Components.EmartCategory, HTMLStencilElement {}
  var HTMLEmartCategoryElement: {
    prototype: HTMLEmartCategoryElement;
    new (): HTMLEmartCategoryElement;
  };

  interface HTMLEmartEmojiElement extends Components.EmartEmoji, HTMLStencilElement {}
  var HTMLEmartEmojiElement: {
    prototype: HTMLEmartEmojiElement;
    new (): HTMLEmartEmojiElement;
  };

  interface HTMLEmartPickerElement extends Components.EmartPicker, HTMLStencilElement {}
  var HTMLEmartPickerElement: {
    prototype: HTMLEmartPickerElement;
    new (): HTMLEmartPickerElement;
  };

  interface HTMLEmartPreviewElement extends Components.EmartPreview, HTMLStencilElement {}
  var HTMLEmartPreviewElement: {
    prototype: HTMLEmartPreviewElement;
    new (): HTMLEmartPreviewElement;
  };

  interface HTMLEmartSearchElement extends Components.EmartSearch, HTMLStencilElement {}
  var HTMLEmartSearchElement: {
    prototype: HTMLEmartSearchElement;
    new (): HTMLEmartSearchElement;
  };

  interface HTMLElementTagNameMap {
    'emart-anchors': HTMLEmartAnchorsElement
    'emart-category': HTMLEmartCategoryElement
    'emart-emoji': HTMLEmartEmojiElement
    'emart-picker': HTMLEmartPickerElement
    'emart-preview': HTMLEmartPreviewElement
    'emart-search': HTMLEmartSearchElement
  }

  interface ElementTagNameMap {
    'emart-anchors': HTMLEmartAnchorsElement;
    'emart-category': HTMLEmartCategoryElement;
    'emart-emoji': HTMLEmartEmojiElement;
    'emart-picker': HTMLEmartPickerElement;
    'emart-preview': HTMLEmartPreviewElement;
    'emart-search': HTMLEmartSearchElement;
  }


}
